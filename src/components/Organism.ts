import {
  add1Organism,
  deleteOrganism,
  getOrganismsArray,
} from "../state/organismsArray";
import Color from "../properties/Color";
import newId from "./Id";
import GridCell from "./GridCell";
import {
  cellIsTaken,
  clearCell,
  getFreeCell,
  getLightEnergy,
  getMineralsEnergy,
} from "../state/playgroundMatrix";
import initialProperties, { getInitProps } from "../state/initialProperties";

export type Direction = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
// prettier-ignore
export type Genome = [number, number, number, number, number, number, number, number,
              number,number,number,number,number,number,number,number,
              number,number,number,number,number,number,number,number,
              number,number,number,number,number,number,number,number,
              number,number,number,number,number,number,number,number,
              number,number,number,number,number,number,number,number,
              number,number,number,number,number,number,number,number,
              number,number,number,number,number,number,number,number];
// prettier-ignore-end

// –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è, –æ—Ä–≥–∞–Ω–∏–∑–º –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ –º–∞—Å—Å–∏–≤ –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤ –≤ –Ω–∞—á–∞–ª–æ. –î–µ–π—Å—Ç–≤–∏–µ –æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å
class Organism {
  static genomeMutation = (genome: Genome) => {
    if (Math.floor(Math.random() * 4) === 0) {
      let geneIndex = Math.floor(Math.random() * 64);
      let geneValue = Math.floor(Math.random() * 64);
      genome[geneIndex] = geneValue;
      return genome;
    } else {
      return genome;
    }
  };

  id = newId();
  x;
  y;
  isDead = false;
  genome: Genome;
  gCounter = 0;
  energy = 50;
  minerals = 50;
  direction = 0 as Direction;
  color = Color.PHOTOSYNTHESIS;
  numberofTurns = 0;

  constructor(x: number, y: number, genome: Genome, energy?: number) {
    this.x = x;
    this.y = y;
    this.genome = genome;
    if (energy != undefined) this.energy = energy;
    console.log("New organism created. x = " + x + " y = " + y);
    add1Organism(this);
  }

  getNextGene() {
    return this.genome[this.gCounter + 1];
  }

  static getCoordsOfDirection(
    x: number,
    y: number,
    direction: Direction
  ): [number, number] {
    let newCoords: [number, number] | null = null;
    // prettier-ignore
    switch(direction) {
      case 0: newCoords = [x, y-1]; break
      case 1: newCoords = [x+1, y-1]; break
      case 2: newCoords = [x+1, y]; break
      case 3: newCoords = [x+1, y+1]; break
      case 4: newCoords = [x, y+1]; break
      case 5: newCoords = [x-1, y+1]; break
      case 6: newCoords = [x-1, y]; break
      case 7: newCoords = [x-1, y-1]; break
    } // prettier-ignore-end

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–º–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –º–∞—Ç—Ä–∏—Ü—ã. –ü–æ–ª–µ —Å–∫–≤–æ–∑–Ω–æ–µ
    if (newCoords[0] < 0) {
      newCoords[0] = getInitProps().matrixSize[0] + newCoords[0];
    }

    if (newCoords[1] < 0) {
      newCoords[1] = getInitProps().matrixSize[1] + newCoords[1];
    }

    if (newCoords[0] == getInitProps().matrixSize[0]) {
      newCoords[0] = 0;
    }

    if (newCoords[1] == getInitProps().matrixSize[1]) {
      newCoords[1] = 0;
    }

    return newCoords;
  }

  move(x: number, y: number, direction: Direction) {
    const newCoords = Organism.getCoordsOfDirection(x, y, direction);

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞, –∫—É–¥–∞ —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –æ—Ä–≥–∞–Ω–∏–∑–º –∏–ª–∏ —á—Ç–æ —Ç–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è
    const a = cellIsTaken(newCoords);
    if (a > 2) {
      // –ï—Å–ª–∏ –æ—Ä–≥–∞–Ω–∏–∫–∞ - 4, –æ—Ä–≥–∞–Ω–∏–∑–º - 5, —Ä–æ–¥–Ω—è - 6, –ø—É—Å—Ç–æ - 2.
      // gCounter —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —ç—Ç–æ–º –≥–µ–Ω–µ.
      // –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏—é "—Ä–æ–¥–Ω—è". –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –≥–µ–Ω? –ì–µ–Ω –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∏–∑–∞—Ü–∏—è/–æ–¥–∏–Ω–æ—á–∫–∞.
      // –ù–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏.
      return a;
    } else {
      clearCell([x, y]);
      this.x = newCoords[0];
      this.y = newCoords[1];
      return a;
    }
  }

  look(x: number, y: number, direction: Direction) {
    const newCoords = Organism.getCoordsOfDirection(x, y, direction);
    return cellIsTaken(newCoords);
  }

  fission(x: number, y: number, direction: Direction): 0 | 1 | 2 {
    const newCoords = Organism.getCoordsOfDirection(x, y, direction);
    const a = cellIsTaken(newCoords);
    if (a > 2) {
      const freeCoord = getFreeCell([x, y], direction);
      if (freeCoord != null) {
        new Organism(
          freeCoord[0],
          freeCoord[1],
          Organism.genomeMutation(this.genome)
        );
        return 1;
      } else return 0;
      // –Ω—É–∂–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–º –≤ –º–∞—Ç—Ä–∏—Ü–µ
    } else {
      new Organism(
        newCoords[0],
        newCoords[1],
        Organism.genomeMutation(this.genome)
      );
      // –Ω—É–∂–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–º –≤ –º–∞—Ç—Ä–∏—Ü–µ
      return 1;
    }
  }

  eat(direction: Direction) {
    // 1. –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–ª–µ—Ç–∫–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    let newCoords = Organism.getCoordsOfDirection(this.x, this.y, direction);
    const cellStatus = cellIsTaken(newCoords);
    if (cellStatus > 2) {
      if (cellStatus === 4) {
        clearCell(newCoords); // —É–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã
        return 30;
      }
      if (cellStatus === 5) {
        const id = clearCell(newCoords);
        deleteOrganism(id);
        return 45;
      }
      if (cellStatus === 6) {
        return 0;
      } // –ø–æ–∫–∞ —á—Ç–æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –Ω–µ –µ–¥–∏–º
    } else {
      return 0;
    }
    return 0;
  }

  exec() {
    this.numberofTurns++;
    console.log(
      "genome code = " + this.genome[this.gCounter] + " id = " + this.id
    );
    let endofTurn = false;
    for (let i = 0; i < initialProperties.numberOfCommand && !endofTurn; i++) {
      endofTurn = this.runGenome();
      // console.log("endofTurn = " + endofTurn + i);
    }

    this.minerals += getMineralsEnergy(this.y);

    // üë∂
    // –¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –∫–æ–ª-–≤–µ —ç–Ω–µ—Ä–≥–∏–∏. –ö–æ–ª-–≤–æ –¥–µ—Ç–µ–π –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª-–≤–∞ —ç–Ω–µ—Ä–≥–∏–∏
    if (this.energy > 100) {
      const result = this.fission(this.x, this.y, this.direction);
      console.log("—Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–µ–Ω–∏—è: " + result);

      if (result === 0) {
        // —Ä–∞–∑–º–Ω–æ–∂–∏—Ç—Å—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
        this.energy = this.energy - 8;
      }
      if (result === 1) {
        // –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–¥–Ω–æ –¥–µ–ª–µ–Ω–∏–µ
        this.energy = this.energy - 70;
      }
    }

    return {
      x: this.x,
      y: this.y,
      isEmpty: false,
      organismId: this.id,
      isDead: this.isDead,
      color: this.color,
    } as GridCell;
  }

  runGenome() {
    // console.log("counter = " + this.gCounter);

    switch (this.genome[this.gCounter]) {
      case 23: // üß≠
        this.direction = (this.getNextGene() % 8) as Direction; // defines move direction
        this.gCounter = this.gCounter + 2;
        this.energy--;
        break;

      case 24: // üß≠
        this.direction = (this.direction +
          (this.getNextGene() % 8)) as Direction; // defines move direction
        if (this.direction > 8)
          this.direction = (this.direction - 8) as Direction;
        this.gCounter = this.gCounter + 2;
        this.energy--;
        break;

      case 25: //  üåû
        this.gCounter++;
        this.energy += getLightEnergy(this.y);
        // console.log("PHSys");
        return true;

      case 26: //  üèÉ‚Äç‚ôÄÔ∏è
        this.direction = (this.getNextGene() % 8) as Direction;
        const counterShift0 = this.move(this.x, this.y, this.direction);
        this.gCounter += this.genome[this.gCounter + counterShift0]; // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–µ–Ω–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ counterShift
        this.energy--;
        return true;

      case 27: //  üèÉ‚Äç‚ôÄÔ∏è
        const counterShift1 = this.move(this.x, this.y, this.direction);
        this.gCounter += this.genome[this.gCounter + counterShift1]; // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–µ–Ω–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ counterShift
        this.energy--;
        return true;

      case 28: // üç¥
        this.direction = (this.getNextGene() % 8) as Direction;
        const energy = this.eat(this.direction);
        this.energy += energy;
        this.gCounter++;
        return true;

      case 29: // üç¥
        const energy1 = this.eat(this.direction);
        this.energy += energy1;
        this.gCounter++;
        return true;

      case 30: // üëÄ
        this.direction = (this.getNextGene() % 8) as Direction;
        const counterShift2 = this.look(this.x, this.y, this.direction);
        this.gCounter += this.genome[this.gCounter + counterShift2]; // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–µ–Ω–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ counterShift
        this.energy--;
        break;

      case 31: // üëÄ
        const counterShift3 = this.look(this.x, this.y, this.direction);
        this.gCounter += this.genome[this.gCounter + counterShift3]; // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–µ–Ω–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ counterShift
        this.energy--;
        break;

      // case 32:

      // break;

      case 47: // –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–µ—Ä–∞–ª–æ–≤ –≤ —ç–Ω–µ—Ä–≥–∏—é
        if (this.getNextGene() * 15 > this.energy) {
          this.gCounter = this.genome[this.gCounter + 2];
        } else {
          this.gCounter = this.genome[this.gCounter + 3];
        }
        this.energy += this.minerals;
        this.minerals = 0;
        break;

      default:
        this.gCounter += this.genome[this.gCounter];
        console.log("default option " + this.gCounter);
        break;
    }

    if (this.gCounter > 63) {
      this.gCounter = this.gCounter - 64;
    }

    // console.log("this.energy = " + this.energy);

    if (this.energy < 1) {
      // –æ—Ä–≥–∞–Ω–∏–∑–º —É–º–∏—Ä–∞–µ—Ç
      // console.log("–æ—Ä–≥–∞–Ω–∏–∑–º —É–º–∏—Ä–∞–µ—Ç");
      this.isDead = true;
      this.color = Color.DEAD;
      this.id = -1;
      return true;
    } else {
      // –Ω–∞–ª–æ–≥ –Ω–∞ –∂–∏–∑–Ω—å
      this.energy--;
    }

    // console.log("–û—Ä–≥–∞–Ω–∏–∑–º –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∂–∏—Ç—å");

    return false;
  }
}

export default Organism;
// export type Organism = typeof Organism;

// –ú—ã —Å–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–º. –î–∞–ª–µ–µ –æ—Ä–≥–∞–Ω–∏–∑–º –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ –±–∞–∑—É —Å –æ—Ä–≥–∞–Ω–∏–∑–º–∞–º–∏: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤.
// –î–∞–ª–µ–µ –º—ã –±—É–¥–µ–º –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –º–∞—Å—Å–∏–≤—É –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–∂–¥–æ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–º–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –≥–µ–Ω–æ–º—É.
// –í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ä–≥–∞–Ω–∏–∑–º –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Ç—Ä–∏—Ü—É Playground.
// –¢–∞–∫ –∂–µ –≤ –±—É–¥—É—â–µ–º –æ—Ä–≥–∞–Ω–∏–∑–º –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤.
//
//
// 23 - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ
// 24 - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ
// 25 - —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑
// 26 - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
// 27 - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–∫—É—â–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
// 28 - —Å–∫—É—à–∞—Ç—å –≤ –Ω–æ–≤–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
// 29 - —Å–∫–∞—à–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
// 30 - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –Ω–æ–≤–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
// 31 - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ç–µ–∫—É—â–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
// 32 - –¥–µ–ª–∏—Ç—å—Å—è —ç–Ω–µ—Ä–≥–∏–µ–π –≤ –Ω–æ–≤–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
// 33 - –¥–µ–ª–∏—Ç—å—Å—è —ç–Ω–µ—Ä–≥–∏–µ–π –≤ —Ç–µ–∫—É—â–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
// 47 - —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º. –û—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç —Å–º–µ—â–µ–Ω–∏–µ gCounter. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç –º–∏–Ω–µ—Ä–∞–ª—ã –≤ —ç–Ω–µ—Ä–≥–∏—é, –µ—Å–ª–∏ –º–∞–ª–æ.
//
//
//
//
//
//
//
//
